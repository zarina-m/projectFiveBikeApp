{"version":3,"sources":["Header.js","Search.js","Result.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","aria-hidden","href","Search","state","startLocation","endLocation","onChange","e","setState","target","name","value","getLocationInfo","location","a","trim","toLowerCase","indexOf","axios","method","url","params","key","format","result","data","results","locations","latLng","getDistance","lat1","lon1","lat2","lon2","p","c","Math","cos","asin","sqrt","getClosestStations","latlong","closeStations","i","props","stations","length","station","lat","lng","lon","push","getStationStatus","getCompleteStationData","stationStatus","stationInfo","stationData","forEach","stationDetail","info","station_id","status","num_bikes_available","num_docks_available","address","search","preventDefault","startLatLong","endLatLong","startCloseStations","endCloseStations","startStationData","endStationData","handleResults","onSubmit","this","type","startPoint","placeholder","aria-label","required","endPoint","Component","Result","Results","map","App","startResults","endResults","hasResults","getStationInfo","then","res","style","visibility","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+RAWeA,MATf,WACI,OACI,4BAAQC,UAAU,WACd,qCAAU,uBAAGA,UAAU,yBAAyBC,cAAY,SAA5D,UACA,+OAAoN,uBAAGC,KAAK,iCAAR,uB,+BCoHjNC,EAvHf,4MACIC,MAAQ,CACJC,cAAe,GACfC,YAAa,IAHrB,EAMIC,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SANhE,EAQIC,gBARJ,uCAQsB,WAAOC,GAAP,eAAAC,EAAA,yDACU,KAApBD,EAASE,OADC,yCAGH,CAAC,IAAO,EAAG,IAAO,IAHf,QAK0C,IAA/CF,EAASG,cAAcC,QAAQ,aACpCJ,GAAsB,YANZ,aAQF,mDACA,mCATE,SAUKK,IAAM,CACrBC,OAAQ,MACRC,IAJQ,mDAKRC,OAAQ,CACJC,IALI,mCAMJC,OAAQ,OACRV,SAAUA,KAhBJ,cAUVW,EAVU,yBAoBPA,EAAOC,KAAKC,QAAQ,GAAGC,UAAU,GAAGC,QApB7B,4CARtB,wDA+BIC,YAAc,SAACC,EAAMC,EAAMC,EAAMC,GACzB,IAAIC,EAAI,oBACJC,EAAIC,KAAKC,IACTvB,EAAI,GAAMqB,GAAGH,EAAOF,GAAQI,GAAK,EACjCC,EAAEL,EAAOI,GAAKC,EAAEH,EAAOE,IACtB,EAAIC,GAAGF,EAAOF,GAAQG,IAAM,EAEjC,OAAO,MAAQE,KAAKE,KAAKF,KAAKG,KAAKzB,KAtC/C,EAyCI0B,mBAAqB,SAACC,GAElB,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAI,EAAKC,MAAMC,SAASC,OAAQH,IAAK,CACjD,IAAII,EAAU,EAAKH,MAAMC,SAASF,GAEnB,EAAKd,YAAYY,EAAQO,IAAKP,EAAQQ,IAAKF,EAAQC,IAAKD,EAAQG,KAChE,IACXR,EAAcS,KAAKJ,GAG3B,OAAOL,GAnDf,EAuDIU,iBAvDJ,sBAuDuB,4BAAAtC,EAAA,4DACL,wEADK,SAEII,IAAM,CACrBC,OAAQ,MACRC,IAHM,wEAINC,OAAQ,CACJE,OAAQ,UAND,cAEXC,EAFW,yBASRA,EAAOC,KAAKA,KAAKoB,UATT,2CAvDvB,EAmEIQ,uBAAyB,SAACC,EAAeC,GACrC,IAAIC,EAAc,GAmBlB,OAjBAF,EAAcG,SAAQ,SAACC,GACnBH,EAAYE,SAAQ,SAACE,GACjB,GAAID,EAAcE,aAAeD,EAAKC,YAAuC,eAAzBF,EAAcG,OAAyB,CACvF,IAAIN,EAAc,CACdK,WAAYF,EAAcE,WAC1BE,oBAAqBJ,EAAcI,oBACnCC,oBAAqBL,EAAcK,oBACnCC,QAASL,EAAKK,QACdhB,IAAKW,EAAKX,IACVC,IAAKU,EAAKT,KAGdM,EAAYL,KAAKI,UAKtBC,GAvFf,EA2FIS,OA3FJ,uCA2Fa,WAAO1D,GAAP,2BAAAO,EAAA,6DACLP,EAAE2D,iBADG,SAEoB,EAAKtD,gBAAgB,EAAKT,MAAMC,eAFpD,cAED+D,EAFC,gBAGkB,EAAKvD,gBAAgB,EAAKT,MAAME,aAHlD,cAGD+D,EAHC,OAKDC,EAAqB,EAAK7B,mBAAmB2B,GAC7CG,EAAmB,EAAK9B,mBAAmB4B,GAN1C,UAQqB,EAAKhB,mBAR1B,QAQDE,EARC,OAUDiB,EAAmB,EAAKlB,uBAAuBC,EAAee,GAC9DG,EAAiB,EAAKnB,uBAAuBC,EAAegB,GAChE,EAAK1B,MAAM6B,cAAcF,EAAkBC,GAZtC,4CA3Fb,6GA2GQ,OACI,6BAASzE,UAAU,UACf,0BAAM2E,SAAUC,KAAKV,QACjB,2BAAOW,KAAK,OAAOlE,KAAK,gBAAgBC,MAAOgE,KAAKxE,MAAM0E,WAAYvE,SAAUqE,KAAKrE,SAAUwE,YAAY,iBAAiBC,aAAW,uBAAuBC,UAAQ,IACtK,4BAAQJ,KAAK,SAASjE,MAAM,UAA5B,UACA,2BAAOiE,KAAK,OAAOlE,KAAK,cAAcC,MAAOgE,KAAKxE,MAAM8E,SAAU3E,SAAUqE,KAAKrE,SAAUwE,YAAY,eAAeC,aAAW,6BAhHrJ,GAA4BG,aCebC,EAhBf,uKACc,IAAD,EAC+DR,KAAK/B,MAAMpB,OAA1EwC,EADA,EACAA,QAASF,EADT,EACSA,oBAAqBC,EAD9B,EAC8BA,oBAAqBf,EADnD,EACmDA,IAAKC,EADxD,EACwDA,IAEzD7B,EAAG,sCAAkC4B,EAAlC,YAAyCC,EAAzC,QACP,OACI,yBAAKlD,UAAU,UACX,4BAAKiE,GACL,8BAAM,uBAAGjE,UAAU,iBAAiBgF,aAAW,uBAA/C,IAA0EjB,EAA1E,KACA,8BAAM,uBAAG/D,UAAU,0BAA0BgF,aAAW,oBAAxD,IAAgFhB,EAAhF,KACA,4BAAI,uBAAG9D,KAAMmB,GAAT,qBAVpB,GAA4B8D,aCebE,E,uKAZP,OAAIT,KAAK/B,MAAMlB,QAAQoB,OAAS,EAExB6B,KAAK/B,MAAMlB,QAAQ2D,KAAI,SAAC7D,GAAD,OACnB,kBAAC,EAAD,CAAQA,OAAQA,OAIhB,2E,GATE0D,aCqEPI,G,8DA9DX,aAAe,IAAD,8BACZ,gBAaFb,cAAgB,SAACF,EAAkBC,GACjC,EAAKhE,SAAS,CACZ+E,aAAchB,EACdiB,WAAYhB,EACZiB,YAAY,KAlBF,EAsBdC,eAAiB,WAEfxE,IAAM,CACJC,OAAQ,MACRC,IAHU,sEAIVC,OAAQ,CACNE,OAAQ,UAEToE,MAAK,SAACC,GACP,EAAKpF,SAAS,CACZqC,SAAU+C,EAAInE,KAAKA,KAAKoB,eA9B5B,EAAK1C,MAAQ,CACXsF,YAAY,EACZ5C,SAAU,GACV0C,aAAc,GACdC,WAAY,IANF,E,gEAWZb,KAAKe,mB,+BA2BP,OACE,oCACA,kBAAC,EAAD,MACA,0BAAM3F,UAAU,WACZ,kBAAC,EAAD,CAAQ8C,SAAU8B,KAAKxE,MAAM0C,SAAU4B,cAAeE,KAAKF,gBAC3D,6BAAS1E,UAAU,UAAU8F,MAAO,CAACC,WAAYnB,KAAKxE,MAAMsF,WAAa,UAAY,WACnF,6BACE,qCACA,kBAAC,EAAD,CAAS/D,QAAWiD,KAAKxE,MAAMoF,gBAEjC,6BACE,mCACA,kBAAC,EAAD,CAAS7D,QAASiD,KAAKxE,MAAMqF,qB,GAnDzBN,cCGEa,QACW,cAA7BC,OAAOnF,SAASoF,UAEe,UAA7BD,OAAOnF,SAASoF,UAEhBD,OAAOnF,SAASoF,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44a8885b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"wrapper\">\r\n            <h1>Rider <i className=\"fas fa-search-location\" aria-hidden=\"true\"></i> Radar</h1>\r\n            <p>Enter your location below to fetch information about the closest Bike Share stations near you. Enter both a starting point and ending point to best plan your trip. New to Bike Share Toronto or need some help? <a href=\"https://bikesharetoronto.com/\">Learn more here.</a></p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport class Search extends Component {\r\n    state = {\r\n        startLocation: \"\",\r\n        endLocation: \"\"\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n    //Turn user query locations into lat/long\r\n    getLocationInfo = async (location) => {\r\n        if (location.trim() === \"\") {\r\n            // A default location that will not return any results.\r\n            return {\"lat\": 0, \"lng\": 0}\r\n        }\r\n        else if (location.toLowerCase().indexOf('toronto') === -1) {\r\n            location = location + ' toronto'\r\n        }\r\n        const url = 'http://open.mapquestapi.com/geocoding/v1/address';\r\n        const key = 'oG2GROEUtNBuOk8SP7rT4qE7fPSTy8mo'\r\n        let result = await axios({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                key: key,\r\n                format: 'json',\r\n                location: location\r\n            }\r\n        });\r\n\r\n        return result.data.results[0].locations[0].latLng\r\n    }\r\n    //Haversine formula\r\n    getDistance = (lat1, lon1, lat2, lon2) => {\r\n            let p = 0.017453292519943295;    // Math.PI / 180\r\n            let c = Math.cos;\r\n            let a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n                c(lat1 * p) * c(lat2 * p) *\r\n                (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n    //Find stations within 0.3 km of the given latitude and longitude\r\n    getClosestStations = (latlong) => {\r\n        let closeStations = []\r\n        for (let i = 0; i < this.props.stations.length; i++) {\r\n            let station = this.props.stations[i];\r\n\r\n            let distance = this.getDistance(latlong.lat, latlong.lng, station.lat, station.lon)\r\n            if (distance < 0.3) {\r\n                closeStations.push(station)\r\n            }\r\n        } \r\n        return closeStations\r\n\r\n    }\r\n    //Axios call to get live data \r\n    getStationStatus = async () => {\r\n        let url = 'https://toronto-us.publicbikesystem.net/ube/gbfs/v1/en/station_status'\r\n        let result = await axios({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                format: 'json',\r\n            }\r\n        });\r\n        return result.data.data.stations\r\n    }\r\n    //Merge live station data for nearby stations with station info\r\n    getCompleteStationData = (stationStatus, stationInfo) => {\r\n        let stationData = []\r\n        \r\n        stationStatus.forEach((stationDetail) => {\r\n            stationInfo.forEach((info) => {\r\n                if (stationDetail.station_id === info.station_id && stationDetail.status === \"IN_SERVICE\") {\r\n                    let stationInfo = {\r\n                        station_id: stationDetail.station_id,\r\n                        num_bikes_available: stationDetail.num_bikes_available,\r\n                        num_docks_available: stationDetail.num_docks_available,\r\n                        address: info.address,\r\n                        lat: info.lat,\r\n                        lng: info.lon\r\n                    }\r\n\r\n                    stationData.push(stationInfo)\r\n                }\r\n            })\r\n        })\r\n\r\n        return stationData\r\n\r\n    } \r\n    //On submit, search for bike stations near the start/end points\r\n    search = async (e) => {\r\n        e.preventDefault()\r\n        let startLatLong = await this.getLocationInfo(this.state.startLocation);\r\n        let endLatLong = await this.getLocationInfo(this.state.endLocation);\r\n\r\n        let startCloseStations = this.getClosestStations(startLatLong)\r\n        let endCloseStations = this.getClosestStations(endLatLong)\r\n\r\n        let stationStatus = await this.getStationStatus();\r\n\r\n        let startStationData = this.getCompleteStationData(stationStatus, startCloseStations)\r\n        let endStationData = this.getCompleteStationData(stationStatus, endCloseStations)\r\n        this.props.handleResults(startStationData, endStationData)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"search\">\r\n                <form onSubmit={this.search}>\r\n                    <input type=\"text\" name=\"startLocation\" value={this.state.startPoint} onChange={this.onChange} placeholder=\"Starting point\" aria-label=\"Enter start location\" required></input>\r\n                    <button type=\"submit\" value=\"Submit\">Submit</button>\r\n                    <input type=\"text\" name=\"endLocation\" value={this.state.endPoint} onChange={this.onChange} placeholder=\"Ending point\" aria-label=\"Enter end location\"></input>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\n\r\nexport class Result extends Component {\r\n    render() {\r\n        let {address, num_bikes_available, num_docks_available, lat, lng} = this.props.result;\r\n\r\n        let url = `https://www.google.ca/maps/@${lat},${lng},20z`\r\n        return (\r\n            <div className=\"result\">\r\n                <h3>{address}</h3>\r\n                <span><i className=\"fas fa-bicycle\" aria-label=\"Bicycles available\"></i> {num_bikes_available} </span>\r\n                <span><i className=\"fas fa-charging-station\" aria-label=\"Docks available\"></i> {num_docks_available} </span>\r\n                <h3><a href={url}>Google Maps</a></h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result\r\n","import React, { Component } from 'react';\r\nimport Result from './Result';\r\n\r\nclass Results extends Component {\r\n    render() {\r\n        if (this.props.results.length > 0) {\r\n            return (\r\n                this.props.results.map((result) => (\r\n                    <Result result={result} />\r\n            )));\r\n            }\r\n        else{\r\n            return (<span>No results found, please search again</span>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport Header from './Header'\nimport Search from './Search'\nimport Results from './Results'\nimport './setup.css'\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n      super()\n      this.state = {\n        hasResults: false,\n        stations: [],\n        startResults: [],\n        endResults: []\n      }\n    }\n    //When application loads, retrieve all the station information\n    componentDidMount() {\n      this.getStationInfo()\n    }\n    //Save nearby station info in state\n    handleResults = (startStationData, endStationData) => {\n      this.setState({\n        startResults: startStationData,\n        endResults: endStationData,\n        hasResults: true\n      })\n    }\n    //Axios call to retrieve all station info\n    getStationInfo = () => {\n      const url = 'https://tor.publicbikesystem.net/ube/gbfs/v1/en/station_information';\n      axios({\n        method: 'GET',\n        url: url,\n        params: {\n          format: 'json',\n        }\n      }).then((res) => {\n        this.setState({\n          stations: res.data.data.stations\n        })\n      })\n    }\n\n  render() {\n    return (\n      <> \n      <Header/>\n      <main className=\"wrapper\">\n          <Search stations={this.state.stations} handleResults={this.handleResults}/>\n          <section className=\"results\" style={{visibility: this.state.hasResults ? \"visible\" : \"hidden\" }}>\n            <div> \n              <h2>Start</h2>\n              <Results results = {this.state.startResults}/>\n            </div>\n            <div>\n              <h2>End</h2>\n              <Results results={this.state.endResults} />\n            </div>\n          </section>\n      </main>\n      </>\n\n    )\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}